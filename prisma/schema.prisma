// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  title                 String

  @@map("articles")
}

// ### better auth

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String   @id
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  name                  String
  email                 String  @unique
  emailVerified         Boolean @default(false)
  image                 String?

  role                  UserRole  @default(USER)
  banned                Boolean?  @default(false)
  banReason             String?
  banExpires            DateTime?

  sessions              Session[]
  accounts              Account[]

  @@map("users")
}

model Session {
  id                    String   @id
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  expiresAt             DateTime
  token                 String   @unique
  ipAddress             String?
  userAgent             String?

  impersonatedBy        String?

  userId                String
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String   @id
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId                String
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id                    String   @id
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  identifier            String
  value                 String
  expiresAt             DateTime

  @@map("verifications")
}
